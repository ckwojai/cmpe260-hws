#+TITLE: HW2
#+AUTHOR: Kin Chang (013783848)
#+DATE: <2023-04-07 Fri>
#+EMAIL: kinwo.chang@sjsu.edu
#+EXPORT_FILE_NAME: HW2
#+OPTIONS: toc:nil
#+OPTIONS: num:nil
#+OPTIONS: \n:t
#+ATTR_ASCII: :width 1000
#+LATEX_HEADER: \usepackage[a3paper,landscape]{geometry}

* HW1
** Q1
- Model forward pass: NN of hidden dim [32, 64, 128, 256, 512] -> representation layer of 10 latent features
- In this AE, sampling between encoder and decoder is done by using the ~self.z_simple=nn.Linear(...)~, i.e. a straight forward linear transformation.
- Data sampling is done from taking a random actions in gym env, and collect images after each action
[[./hw1/1-1.png]]
[[./hw1/1-2.png]]
** Q2
- The image generated by ae is hit or miss. It could generate an image with cart and pole, but most of the time it generates image that barely resembles anything. On the other hand, vae seems to capture the essence of cart and pole, and generate image that clearly resembles cart and balanced pole consistently.
- They are similar in the sense that they have similar structure, i.e. encoder and decoder. VAE differs in that the encoding layer outputs the mean and standard deviation of each latent variable, instead of the latent vector. Sampling of the latent vector is then done using the mean and std, and is subsequently feed into the decoder.
- The reparametrization trick, i.e. sampling from the mean and std of each latent variable, allow us to backpropagate and estimate the gradient of the Evidence Lower Bound (EVLO). Hence, making stochastic gradient descent possible to minimize loss in VAE.
[[./hw1/2-1.png]]
[[./hw1/2-2.png]]
** Q3
- The environment returns done = True if the following happens:
    + Pole Angle is greater than ±12°
    + Cart Position is greater than ±2.4 (center of the cart reaches the edge of the display)
    + Truncation: Episode length is greater than 500 (200 for v0)
- Code:
  #+begin_src python
if done or frame_idx >= 20:
    obs = env.reset()
    frame_idx = 0
  #+end_src
[[./hw1/3-1.png]]
[[./hw1/3-2.png]]
** Q4
- Range chosen: 0.1-0.2, so that all the images will have the pole on the right side
  #+begin_src python
# The pole angle can be observed between (-.418, .418) radians (or ±24°),
# but the episode terminates if the pole angle is not in the range (-.2095, .2095) (or ±12°)
minAngle, maxAngle = 0.1, 0.2
if minAngle <= obs[2] <= maxAngle:
    imgs[i] = img
    i+=1 # also changed the for loop into a while loop
  #+end_src
- The model does generate images that have the pole on the right side, as expected!
[[./hw1/4-1.png]]
[[./hw1/4-2.png]]
** Q5
- Chose pendulum environment, and adjusted crop proportion to fit the entire pendulum in the image
  #+begin_src python
crop_proportions = (0.2, 0.0, 0.8, 1.0) # cut top and bottom
...
env = gym.make("Pendulum-v1", render_mode='rgb_array')
  #+end_src
- A sample training image:
  [[./hw1/5-3.png]]
- Everything else in the VAE stays the same, the result somewhat ensembles a pendulum, but isn't crisp or clear at all. The loss is around 0.0070 when the training finished; hence, I believe that futher tuning of the model will yield a better result.
  [[./hw1/5-1.png]]
  [[./hw1/5-2.png]]


* HW2
** Task1
- Made a Maze class for easy access to dS, dA, actions, goal, obstacles .etc that are common to functions like visualization, valid state, policy evaluation
- Pytorch tensors are used to represent our state-transformation function, policy functions, value functions, reward functions and more
- Visualization make use of matplotlib, such as scatter(), imshow(), etc
- For more detail, please referece the maze class in the jupyter notebook
- A screenshot of the maze visualization is shown below
#+ATTR_LATEX: :width 0.8\textwidth :placement {r}{0.8\textwidth}
[[./hw2/t1.png]]
** Task2
- Implemented get random policy, where policy(s) do one random action with probability of 1 (deterministic)
- Instead of (y, x), actions are modified to be in the format of (x, y), where x is from left to right, and y is from top to bottom
  + Up, Right, Left, Down, Stay = [(0, -1), (1, 0), (-1, 0), (0, 1), (0, 0)]
  + the (x, y) format will also be the default coordinate in the entire Maze class
- Policy evaluation is implemented according to the updating rule. With terminating condition controlled by the hyperparameter threshold.
- A sample run with gamma=0.8 and threshold=0.001 is shown below. Note that at s=(9,8), the evaluation is 0, because it happens that the random generated policy((9,8)) is to go DOWN, which happens to be optimal. In contrast at s=(8,9), the evaluation is -5, because the random generated policy((8,9)) is to go UP, which is a bad policy.
#+ATTR_LATEX: :width 0.8\textwidth :placement {r}{0.8\textwidth}
[[./hw2/t2.png]]
** Task3
- Implemented set optimal policy with radius as a parameter. The logic is essentially for all state within the radius from the goal, set all the last row to go right, last column to go down, and all others to go left or down with probability of 50 respectively
- A sample run with the policy evaluation with this improved policy is shown below. Note that all states within 2 radius from goal now has better value than that of task2.
- All other states that have an action that can reach a state within 2 radius of the goal is also improved! For example, policy at s=(5,9) is to go RIGHT, which gets closer to the goal (radius 2); policy at s=(7,6) is to go DOWN, which also gets closer to the goal (radius 2).
#+ATTR_LATEX: :width 0.7\textwidth :placement {r}{0.8\textwidth}
[[./hw2/t3.png]]
** Task4
- Implemented the policy improvement function, as well as the policy iteration that combines evaluation and improvement
- Note that in policy improvement, the policy(s) probability isn't multiplied in the sum, because we are exploring other actions to see if it's better
- For gamma=0.8 and threshold=0.01, the iteration takes 11 iteration to complete. The progression at i=2, 5, and final are shown below
#+ATTR_LATEX: :width 1 \textwidth :placement {r}{0.8\textwidth}
[[./hw2/t4-2.jpg]]
#+ATTR_LATEX: :width 1 \textwidth :placement {r}{0.8\textwidth}
[[./hw2/t4-5.jpg]]
#+ATTR_LATEX: :width 1 \textwidth :placement {r}{0.8\textwidth}
[[./hw2/t4-10.jpg]]
** Task5
